{"meta":{"title":"Jerry's Blog","subtitle":"Jerry的博客","description":"Live a valuable life!","author":"Jerry Chen","url":"https://jerrynju.github.io"},"pages":[{"title":"分类","date":"2018-01-14T11:04:02.000Z","updated":"2018-01-14T11:04:59.894Z","comments":false,"path":"categories/index.html","permalink":"https://jerrynju.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签云","date":"2018-01-14T11:00:38.000Z","updated":"2018-01-14T11:05:03.375Z","comments":false,"path":"tags/index.html","permalink":"https://jerrynju.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"相册页面测试","slug":"相册功能测试","date":"2018-02-04T04:43:49.000Z","updated":"2018-02-04T03:10:01.744Z","comments":true,"path":"2018/02/04/相册功能测试/","link":"","permalink":"https://jerrynju.github.io/2018/02/04/相册功能测试/","excerpt":"","text":"","categories":[{"name":"Photos","slug":"Photos","permalink":"https://jerrynju.github.io/categories/Photos/"}],"tags":[{"name":"Mardown","slug":"Mardown","permalink":"https://jerrynju.github.io/tags/Mardown/"},{"name":"Writing","slug":"Writing","permalink":"https://jerrynju.github.io/tags/Writing/"},{"name":"Photos","slug":"Photos","permalink":"https://jerrynju.github.io/tags/Photos/"}]},{"title":"《深入浅出WPF》学习笔记——XAML详解","slug":"XAML","date":"2018-01-31T08:45:30.000Z","updated":"2018-02-03T05:21:14.093Z","comments":true,"path":"2018/01/31/XAML/","link":"","permalink":"https://jerrynju.github.io/2018/01/31/XAML/","excerpt":"本文主要内容整理自水利水电出版社刘铁猛著《深入浅出WPF》一书 XAMLXAML基础XAML全称Extensible Application Markup Language，是一种用来描述图形用户界面的标记语言。它的目的是实现程序视图和逻辑代码之间的解耦。 XAML是一种“声明”式的语言，当我们见到一个标签，就意味着声明了一个对象，对象之间的关系要么是并列，要么是包含。","text":"本文主要内容整理自水利水电出版社刘铁猛著《深入浅出WPF》一书 XAMLXAML基础XAML全称Extensible Application Markup Language，是一种用来描述图形用户界面的标记语言。它的目的是实现程序视图和逻辑代码之间的解耦。 XAML是一种“声明”式的语言，当我们见到一个标签，就意味着声明了一个对象，对象之间的关系要么是并列，要么是包含。 WPF项目文件 Properties：程序用到的资源（如图标、图片、静态字符串）和配置信息。 References：标记了这个项目需要引用的其他项目。里面包含.NET Framework里的类库。 App.xaml：程序的主体。在Windows系统中，一个程序就是一个进程（Process），一个GUI进程必须要有一个窗体作为主窗体，该文件定义了程序的进程和主窗体。 MainWindow.xaml：程序的主窗体。 最简单的XAML代码XAML由XML派生而来，使用标签对声明一个元素（每个元素对应内存中的一个对象），可以给元素的特征（Attribute）赋值。 1234非空标签：&lt;Tag Attribute1=Value1 Attribute2=Value2&gt;Content&lt;/Tag&gt;空标签：&lt;Tag Attribute1=Value1 Attribute2=Value2/&gt; Attribute和Property的区别：Property属于面向对象理论范畴，用于对对象性质进行抽象，而Attribute属于编程语言文法范畴，与区分同类语法元素。 1234567891011121314XAML的基本结构：&lt;Window&gt; &lt;Grid&gt; ...... &lt;/Grid&gt;&lt;/Window&gt;&lt;Window&gt;标签的Attribute详解： x:Class=\"MyWpfApp.Window1\" //指定XAML文件编译成的C#类名，与Window1.xaml.cs均使用了partial关键字，编译后组合 xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" //对应绘制UI相关程序集 xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" //对应XAML语言处理相关程序集 Title=\"Window1\" Height=\"300\" Width=\"300\" xmlns是XML-namespace的缩写，其特征语法为： 1xmlns[:可选的映射前缀]-“名称空间” 没有可选映射前缀的名称空间为默认名称空间，只能有一个。 名称空间看上去像网页地址，是因为这是XAML解析器的一个硬性编码（hard-coding），遇到这些特定的字符串，相应的Assembly和Namespace就会引入进来。 XAML和C#的对应关系123456789101112131415&lt;Window x:Class=\"SimpleWPF.MainWindow\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:local=\"clr-namespace:SimpleWPF\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" Width=\"525\" Height=\"350\" mc:Ignorable=\"d\" Title=\"MainWindow\"&gt; &lt;Button Click=\"Button_Click\" Content=\"Click Me!\" /&gt;&lt;/Window&gt; 上面的XAML代码等价于CSharp代码： 12345678910111213141516171819202122232425262728293031using System;using System.Windows;using System.Windows.Controls;namespace SimpleWPF&#123; class Program &#123; [STAThread] static void Main() &#123; var b = new Button &#123; Content = \"Click me!\" &#125;; b.Click += (sender, e) =&gt; &#123; b.Content = \"Clicked\"; &#125;; var w = new Window &#123; Title = \"A Simple WPF Demo\", Content=b &#125;; var app = new App(); app.Run(w); &#125; &#125;&#125; 上面两个程序都会被视为项目程序入口，在生成的时候会发生冲突。可以通过项目-属性-启动对象进行设置。 XAML和C#引用外部程序集的方法XAML12345如果要引用PresentationFramework.dll Assembly中的System.Windows.Controls,在根元素的起始标签加上：xmlns:c=\"clr-namespace:System.Windows.Controls;assembly=PresentationFramework\"使用其中的元素的方法：&lt;c:Button&gt;...&lt;/c:Button&gt; C12将PresentationFramework.dll添加到项目引用中，并在代码顶部加上using System.Windows.Controls; 为对象属性赋值Attribute简单赋值12345678&lt;Window x:Class=\"WpfApplicationTree.Windowl\" xmlns=\"http://schcmas.microsoft.com/winfx/2006/xamI/prescnlation\" xmlns:x=\"http://schcmas.microsoft.com/winfx/2006/xaml\" Title=\"Window\" Height=\"188\" Width=\"300\"&gt; &lt;Grid VerticalAligmnent=\"Center\" HorizontalAlignment=\"Center\"&gt; &lt;Rectangle x:Name=\"rectangle\" Width=\"200\" Height=\"120\" Fill=\"Blue\"/&gt; &lt;/Grid&gt;&lt;/Window〉 复杂赋值这种赋值方式也可以写成下面效果相同的代码： 1234567&lt;Grid VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"&gt; &lt;Rectangle x:Name=\"rectangle\" width=\"200\" Height=\"120\"&gt; &lt;Rectangle.Fill&gt; &lt;SolidColorBrush Color=\"Blue\"/&gt; &lt;/Rectangle.Fill&gt; &lt;/Rectangle&gt;&lt;/Grid&gt; 标记扩展标记扩展是一种特殊的Attribute=Value赋值语法，例如在下面的代码中，Slider的值绑定在了TextBox的Text属性上。 123456&lt;Window&gt; &lt;StackPanel&gt; &lt;TextBox Text=\"&#123;Binding ElementName=slider1,Path=Value,Mode=OneWay&#125;\" Margin=\"5\"/&gt; &lt;Slider x:Name=\"slider1\" Margin=\"5\"/&gt; &lt;/StackPanel&gt;&lt;/Window&gt; 当编译器看到花括号中的内容时，会将其中的内容解析成相应的对象。其中对象的数据类型是紧邻左花括号的字符串，右侧字符串则是属性。 这种标记扩展仍然可以写成属性标签的形式。 注意： 标记扩展语法只适用于标记扩展类的派生类，在XAML中使用时，类名中的Extension可以省略； 标记扩展可以嵌套，也可以省略“=”前的参数名； XAML中的Event HandlerWPF支持在XAML中使用Attribute赋值的方式为对象的Event指定Event Handler。比如： 1&lt;Button x:Name=\"button1\" Click=\"button1_Click\"/&gt; 这种特性加上.NET的Partial类特性，可以实现代码后置，即将逻辑代码与UI代码分离。但是，我们也可以使用下面的代码将后置的C#代码置入到XAML文件中。 12345678&lt;x:Code&gt; &lt;![CDATA[ private void button1_Click(object sender, RoutedEventArgs e)&#123; MessageBox.Show(\"Code-Behind!\");&#125; ]]&gt;&lt;/x:Code&gt; 注释XAML中的注释语法为 1&lt;!--注释内容--&gt; x名称空间中的成员出现在Attribute中的成员 x:Class, 将XAML标签中的编译结果与后台代码中指定的类合并。 x:ClassModifier, 指定该标签编译生成的类的访问控制级别。 x:Name, 为该标签声明一个变量，可以在后台代码中直接通过变量名引用该标签。与标签的Name属性功能相同。 x:FieldModifier, 改变控件引用变量的访问级别，需要有x:Name属性。 x:Key, 用于定义资源字典中条目的键值。 x:Shared, 与x:Key一起使用，值为True时，得到的是同一个对象，False则为对象的副本。 出现在标记扩展中的成员 x:Type, 对所有数据类型的抽象，用于标记未知的数据类型。 x:Null, 空值类型。 x:Array, 提供一个ArrayList作为数据源。 x:Static, 用于访问数据类型的属性或字段。常用于程序的国际化。 指令元素 x:Code, 放置C#代码。 x:XData, 在XAML放置XML格式的数据。 控件ContentControl族 Button ButtonBase CheckBox ComboBoxItem ContentControl Frame GridViewColumnHeader Groupltem Label ListBoxItem ListViewItem Navigation Window RadioButton RepcatButton ScrollViewer StatusBarltem Toggle Button ToolTip UserControl Window 只能由单一元素充当其内容 HeaderContentControl族 Expander GroupBox HeaderedContentC ontrol Tabltem 包含Content和Header属性，每个都只能容纳一个元素。 ItemsControl族 Menu MenuBase ContextMenu ComboBox ItemsControl ListBox List View TabControl Tree View Selector StatusBar 用于显示列表化数据 内容属性为Items或ItemSource 每种ItemsControl都有自己对应的Item Container 提交给ItemsControl的内容一定是一个集合 ItemsControl会自动对集合元素进行包装，只需直接修改原数据。 HeaderedItemsControl族 MenuItem TreeViewItem ToolBar Decorator族 ButtonChrome ClassicBorderDecorator ListBoxChrome SystemDropShadowChrome Border InkPresentcr BulletDecorator Viewbox AdornerDecorator 起UI装饰作用 内容属性为Child 内容为单一元素 TextBlock和TextBox TextBlock只能显示文本，不能编辑。但是可以提供丰富的排版效果。内容属性为“Inlines”。 TextBox可以编辑，但是内容是简单字符串。内容属性为“Text”。 Shape族 用于2D图形绘制 为内容属性 使用Fill填充，Stroke设置边线 Panel族 Canvas DockPanel Grid TabPanel ToolBarOverflowPanel StackPanel ToolBarPanel UniformGrid VirtualizingPanel VirtualizingStack Panel WrapPanel 重要布局元素，所有用于UI布局的元素都属于这一族。 内容属性Children。 内容可以是多个元素，由Panel控制布局。 布局常用布局元素 Grid：网格。通过自定义行、列来调整控件布局。 StackPanel：栈式面板。将元素以竖直或水平方向直线排列。 Canvas：画布。使用像素为单位的绝对坐标定位元素。 DockPanel：泊靠式面板。内部元素可选择泊靠方向。 WrapPanel：自动换行面板。内部元素可自动换行。 布局元素的尺寸单位 绝对值：double竖直加上单位。单位有px,in=96px,cm=(96/2.54)px,pt=(96/72)px. 比例值：double竖直加上”*“。解析器会把所有比例值的竖直加起来对未被占用空间总数加权平均。 自动值：字符串Auto。 Grid1234567891011121314151617181920&lt;Grid Margin=\"10\"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width=\"Auto\" MinWidth=\"120\"/&gt; &lt;ColumnDefinition Width=\"*\"/&gt; &lt;ColumnDefinition Width=\"80\"/&gt; &lt;ColumnDefinition Width=\"4\"/&gt; &lt;ColumnDefinition Width=\"80\"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height=\"25\"/&gt; &lt;RowDefinition Height=\"4\"/&gt; &lt;RowDefinition Height=\"*\"/&gt; &lt;RowDefinition Height=\"25\"/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Text=\"请选择您的部门并留言：\" Grid.Column=\"0\" Grid.Row=\"0\" VerticalAlignment=\"Center\"/&gt; &lt;ComboBox Grid.Column=\"1\" Grid.Row=\"0\" Grid.ColumnSpan=\"4\"/&gt; &lt;TextBox Grid.Column=\"0\" Grid.Row=\"2\" Grid.ColumnSpan=\"5\" BorderBrush=\"Black\"/&gt; &lt;Button Content=\"提交\" Grid.Column=\"2\" Grid.Row=\"4\"/&gt; &lt;Button Content=\"清除\" Grid.Column=\"4\" Grid.Row=\"4\"/&gt;&lt;/Grid&gt; StackPanel 三个属性：Orientation，HorizontalAlignment，VerticalAlignment。 其中某一条目变动后，其后的条目会自动移动。 123456789101112131415&lt;Grid&gt; &lt;GroupBox Header=\"请选择没有错别字的成语\" BorderBrush=\"Black\" Margin=\"5\"&gt; &lt;StackPanel Margin=\"5\"&gt; &lt;CheckBox Content=\"A. 迫不及待\"/&gt; &lt;CheckBox Content=\"B. 迫不及待\"/&gt; &lt;CheckBox Content=\"C. 迫不及待\"/&gt; &lt;CheckBox Content=\"D. 迫不及待\"/&gt; &lt;CheckBox Content=\"E. 迫不及待\"/&gt; &lt;StackPanel Orientation=\"Horizontal\" HorizontalAlignment=\"Right\"&gt; &lt;Button Content=\"清空\" Width=\"60\" Margin=\"5\"/&gt; &lt;Button Content=\"确定\" Width=\"60\" Margin=\"5\"/&gt; &lt;/StackPanel&gt; &lt;/StackPanel&gt; &lt;/GroupBox&gt;&lt;/Grid&gt; CanvasCanvas的使用场合： 一经设计就基本不会再改动的小型布局（如图标）。 艺术性较强的布局。 需要大量坐标定位的布局。 动画依赖横纵坐标。 DockPanel DockPanel中的元素会被赋予DockPanel.Dock属性，它是一个枚举类型，具有Left、Top、Right、Bottom四个值。 DockPanel具有一个LastChildFill属性，默认值为True，作用是使用最后一个元素填充所有剩余空间。 1234567&lt;Grid&gt; &lt;DockPanel&gt; &lt;TextBox DockPanel.Dock=\"Top\" Height=\"25\" BorderBrush=\"Black\"/&gt; &lt;TextBox DockPanel.Dock=\"Left\" Width=\"150\" BorderBrush=\"Black\"/&gt; &lt;TextBox BorderBrush=\"Black\"/&gt; &lt;/DockPanel&gt;&lt;/Grid&gt; WrapPanel WrapPanel内部采用流失布局，在流延伸方向上排列尽可能多的空间，排不下的会新起一行。 Orientation属性控制延伸方向，HorizonalAlignment和VerticalAlignment控制内部对齐。 WPF内部原理生产工具的先进程度代表了生产力水平 内容决定形式 Data Binding 数据在存储、逻辑、展示三个层流通 算法一般分布在下面几处，其中3是程序的核心，1、2相对成熟稳定、复用性高，4、5的处理不当会消耗大量精力。 数据库内部 读取和写回数据 业务逻辑 数据展示 界面与逻辑的交互 一个简单的Binding实例这是一个简单的Binding例子，点击界面中的Button以后，TextBox中的内容会同步更新。 MainWindow.XAML中的代码： 1234&lt;StackPanel&gt; &lt;TextBox x:Name=\"tbox\" BorderBrush=\"Black\" Margin=\"5\"/&gt; &lt;Button Content=\"Add Age\" Margin=\"5\" Click=\"Button_Click\"/&gt;&lt;/StackPanel&gt; 新建一个Student类文件： 123456789101112131415161718192021222324252627using System.ComponentModel;namespace SimpleWPF&#123; class Student:INotifyPropertyChanged &#123; public event PropertyChangedEventHandler PropertyChanged; private string name; public string Name &#123; get &#123; return name; &#125; set &#123; name = value; if (this.PropertyChanged != null) &#123; this.PropertyChanged.Invoke(this, new PropertyChangedEventArgs(\"Name\")); &#125; &#125; &#125; &#125;&#125; MainWindow.xaml.cs中的代码： 123456789101112131415161718192021222324public partial class MainWindow : Window &#123; Student stu; public MainWindow() &#123; InitializeComponent(); stu = new Student(); Binding binding = new Binding //新建Binding实例 &#123; Source = stu, //为Binding指定数据源 Path = new PropertyPath(\"Name\") //指定要访问的Binding属性 &#125;; BindingOperations.SetBinding(this.tbox, TextBox.TextProperty, binding); //指定Binding对象 &#125; private void Button_Click(object sender, RoutedEventArgs e) &#123; stu.Name += \"Name\"; &#125; &#125;&#125; 上面的Binding操作也可以写成下面的简化形式： 1this.tbox.SetBinding(TextBox.TextProperty,new Binding(\"Name\")&#123;Source=stu=new Student()&#125;); Binding的源上面的例子中Binding的源是一个对象，这个通过Property公开了自己的数据。为了使该对象在属性值变化值自动通知Binding，该对象的类实现了INotifyPropertyChanged接口，并且在属性的Set语句中激发PropertyChanged事件。 Binding的源还可以有下面几种情况： 控件作为Binding源和Binding标记扩展下面这个例子将一个TextBox中的值与一个Slider相关联： 1234&lt;StackPanel&gt; &lt;TextBox x:Name=\"textBox1\" Text=\"&#123;Binding Path=Value, ElementName=Slider1&#125;\"/&gt; &lt;Slider x:Name=\"Slider1\" Maximum=\"100\" Minimum=\"0\"/&gt;&lt;/StackPanel&gt; 这种在界面层的直接设置无须涉及逻辑层，它与下面的C#代码等价： 1this.textBox1.SetBinding(TextBox.TextProperty,new Binding(\"Value\")&#123;ElementName=\"Slider1\"&#125;); Binding的方向和数据更新 Binding的属性”Mode”控制数据流向，可枚举的值为：TwoWay、OneWay、OnTime、OneWayToSource和Default。 Binding的属性”UpdateSourceTrigger”控制Binding的数据更新，可枚举的值为：PropertyChanged、LostFocus、Explicit和Default。","categories":[{"name":"Techniques","slug":"Techniques","permalink":"https://jerrynju.github.io/categories/Techniques/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://jerrynju.github.io/tags/学习笔记/"},{"name":"WPF","slug":"WPF","permalink":"https://jerrynju.github.io/tags/WPF/"},{"name":"程序开发","slug":"程序开发","permalink":"https://jerrynju.github.io/tags/程序开发/"}]},{"title":"Teaching Notes of AP-Calculus","slug":"AP-Calculus","date":"2018-01-30T04:41:30.000Z","updated":"2018-01-30T04:45:27.416Z","comments":true,"path":"2018/01/30/AP-Calculus/","link":"","permalink":"https://jerrynju.github.io/2018/01/30/AP-Calculus/","excerpt":"AP微积分考试的相关内容，持续更新中","text":"AP微积分考试的相关内容，持续更新中 考试要求ABⅠ.掌握好下面的基础知识(Basic Facts) 基本初等函数(Common Functions)的导数(Derivatives)和不定积分(Antiderivatives)； 导数的积(Product)、导数的商(Quotient)和导数的链式法则(Chain Rules)； 使用矩形(Rectangle)的左边(Left)、中点(Midpoint)或右边(Right)估算定积分，使用梯形法则(Trapezoid Rules)估算定积分(Definite Integrals)； 重要的定理：罗尔定理(Rolle’s Theorem)，中值定理(The Mean Value Theorem)和微积分基本定理(The Fundamental Theorem of Calculus)； Ⅱ.理解导数是一个瞬时的变化比率，并且能够应用这个概念 求方程（Equation）的切线（Tangent Line）； 确定函数在那个地方是上升/下降（Increasing/Decreasing），向上/向下凹下（Concave Up/Down），以及取得最大值/最小值(Maxima/Minima)和拐点(Inflection)； 在运动中分析一个物体的瞬时速度(Speed)、速度(Velocity)和加速度(Acceleration)；必要时，运用隐函数求导(Implicit Differentiation)的方式解决变化率(Rates)问题； Ⅲ.理解积分是代表着基于不定积分的累加函数，并能够运用这个概念： 函数的平均值(Average Value)； 面积(Area)和体积(Volume)； 运动对象的位置(Position)和运动距离(Distance)； 给定一个比例(Accumulation)，考虑累积的总量(Total Amount)； 微分方程(Differential Equations)，包括解决办法和斜率场(Slope Fields)； Ⅳ.能够应用上述微积分(Calculus)的概念，无论是用代数(Algebraically)表达函数、用图形表达函数还是用表格表达函数。Ⅴ.如何在考试中发挥得最好 回答所有的选择题(Multiple-choice Questions)； 了解什么时候可以使用计算器(Calculator)，什么时候不能使用，并且学会使用计算器； 规范你的书写表达方式；知道如何回答自由解答题； BCⅠ.考试要点一 掌握针对AP微积分AB考试列出来的5大要点。这部分所列的问题直接决定了参加AB考生的考试成绩，并且这些问题还是学习BC部分的基础和所必须掌握的。 Ⅱ.考试要点二在AP微积分AB的基础上，下列知识点有所扩展： 使用洛必达法则(L’Hopital’s Rule)计算不定型的极限(Limits of Indeterminate Forms)； 使用极限分析和求解反常积分(Improper Integrals)； 解决logistic型微分方程和使用欧拉方法(Euler’s Method)估算分析； 使用分步积分法(Integration by Parts)和部分分数法(Partial Fractions)求解积分(Finding Antiderivatives)； 求解弧线长(Arc Lengths) Ⅲ.考试要点三 掌握参数函数(Parametrically Defined Functions)和极坐标函数(Polar Functions)。 有能力使用参数函数和极坐标函数应用于微积分的概念。 Ⅳ.考试要点四 掌握两个维度的运动分析。 掌握如何分析位置(Position)，速度(Velocity)，瞬时速度(Speed)，加速度(Acceleration)，物体运动的距离(Distance)以及使用向量(Vectors)微积分的概念分析在两个维度上的运动。 Ⅴ.考试要点五（无穷级数-Infinite Series) 分析一个级数的敛散性(Converges or Diverges)； 使用泰勒理论(Taylor’s Theorem)表示函数的幂级数(Power Series)； 确定幂级数的收敛区间(The Interval of Convergence)； 估算级数的误差边界(Bounds on the Error)。 词汇表 英文 中文 open interval 开区间 closed interval 闭区间 length of an interval 区间长度 domain 定义域 range 值域 independent variable 自变量 intermediate variable 中间变是 function 函数 sign function 符号函数 composite function 复合函数 piecewise function 分段函数 elementary function 初等函数 function property 函数性质 even function 偶函数 odd function 奇函数 periodic function 周期函数 monotone function 单调函数 inverse function 反函数 power function 幂函数 exponential function 指数函数 logarithmic function 对数函数 trigonometric function 三角函数 inverse trigonometric fun ction 反三角函数 parametric function 含参函数 polar function 极（坐标）函数 vector function 向量函数 transforming function 函数变换 operation of function 函数运算 add、subtract 加、减 multiply、divide 乘、除 Sum、difference 和、差 product、quotient 积、商 Trigonometric identity 三角恒等式 Pythagorean identities 毕达哥斯拉等式 double-angle formula 两倍角公式 power-reducing formula 降幂公式 sum formula 和角公式 difference formula 差角公式 Polar equation 极坐标方程 vertex 顶点 polar coordinate 极坐标 polynomial 多项式 limit 极限 approach 接近，靠近 left-hand limit 左极限 right-hand limit 右极限 Infinity 无穷 positive infinity 正无穷 negative infinity 负无穷 Mathematical terminology 数学术语 algebraical 代数的 coefficient 系数 the highest power of x X最高次项 numerator 分子 denominator 分母 radians 弧度 degrees 角度 expand and simplify 展开化简 factor…out of 约去 sketch the function 画函数图像 multiply the top and the bottom of the expression by 表达式上下都乘以 derivative 导数 differential 微分的，微分 find derivative 求导 difference quotient 差商 differentiability 可微性 differentiable 可微的 slope 斜率 steepness 倾斜度 secant line 割线 normal line 法线 tangent line 切线 conjugate 共轭 plug……into…… 把…代入… divide A by B 把A除以B infinitesimally small amoun t 极小的数，无穷小 take derivative 求导 differentiate 求…的导数 first derivative 一阶导数 second derivative 二阶导数 the power rule 幂法则 the addition rule 加法法则 the product rule 乘法法则 the quotient rule 商法则 chain rule 链式法则 figure out 计算 radical 根式 take the square root 求平方根 cross-multiply 交叉相乘 switch back and forth 转换 reciprocal 倒数 multiply A by B 用A乘以B y terms of x 用x表示y with respect to 关于，对… corollary 推论 n-th derivative n阶翻 higher order derivative 高阶导数 equation of tangent line 切线方程 equation of normal line 法线方程 perpendicular 垂直的 horizontal 水平的 parallel to 平行于 negative reciprocal 负导数 original equation 原方程 root 根 x-intercept X轴的截距 rough 大致的 absolute 绝对最大 extreme maximum 最大值 relative 相对最大 local maximum 极大值 extreme value 极值 optimal value 最优值 critical value 临界值 critical point 临界点 inflection 拐点 analytic geometry 解析几何 vertex 顶点 dimension 尺度，维数 semicircle 半圆 diameter 直径 inscribed 内接 ellipse 椭圆 length 长 width 宽 perimeter、 circumference 周长 area 面积 surface area 表面积 volume 体积 cubic 立方体的 cylindrical 圆柱的 right triangle 直角三角形 equilateral triangle 等边三角形 isosceles triangle 等腰三角形 parabola 拋物线 rectangular prism 长方体 sphere 球体 spherical balloon 气球 cone 锥 conical tank 圆锥 right circular cone 直圆锥 oblique circular cone 斜圆锥 concavity 凹度，凹形 concave up 凹 concave down 凸 particle 粒子，质点 velocity 速度(矢畺） speed 速率(标畺） acceleration 加速度 position 位置 distance 距离 displacement 位移 odometer 里程表 related rate 相关变化率 slid toward 朝…滑行 slow down 减速 speed up 加速 elevation angle 仰角 altitude 高度，高度 substitute back 回代 cartesian 直角坐标系的 voltage 电压 current 电流 resistance 电阻 circuit 电路 differential 微分 linearization 线性化 quantity 数量 error 误差 approximation 近似 the Indefinite Integral 不定积分 antiderivative 原函数，不定积分 integration 积分法 integrand 被积函数 U-substitution U代换 corollary 推论 natural logarithm 自然对数 absolute value mark 绝对值符号 eliminate 除去，消去 the Definite Integral 定积分 rectangle 矩形 trapezoid 梯形 inscribed 内接 circumscribed 外接 converge 收敛 diverge 发散 applications of Integral 积分的应用 washers method “垫圈”法 disk method 圆盘法 vertical slices 垂直切片 horizontal slices 水平切片 infinitely thin strips 无限薄条 intersect 相交 cylindrical shell method 圆柱壳法 cross-section 横截面 isosceles right triangle 等腰直用三角形 hypotenuse 斜边 set up but do not evaluate the integral 只需列式，不用求值 differential equation 微分方程 separation of variable 变畺分离 be proportional to 成比例 exponential growth rate 指数增长 colony 菌落 radioactive 放射性的 infinite series 无穷级数 sequences 数列 series 级数 a sequence of number 数列 succession 连续 subscript 下标 partial sum 部分和 the nth term of a sequence 数列的第n项 nonzero term 非零项 the harmonic series 调和级数 geometric series 几何级数 alternating series 交错级数 power series 幂级数 alternating harmonic series 交错调和级数 Taylor series 泰勒级数 Maclaurin series 麦克劳林级数 ratio test 比值检验法 integal test 积分审敛法 comparison test 比较审敛法 convergence 收敛 absolute convergence 绝对收敛 radius of convergence 收敛半径 conditional convergence 条件收敛 interval of convergence 收敛区间 diverge 发散 error bound 误差限 Lagrange error 拉格朗日误差 the neighborhood of the po int 某点的邻域 a third degree Taylor polynomial 三阶泰勒多项式 计算器的使用使用规定 考生必须持用美国大学委员会(The College Board)规定的图形计算器参加考试。 允许考生携带两台图形计算器，但不允许在考场上借用其它同学的图形计算器。 图形计算器记忆器中存储的数据和程序进入考场前清空。下表带星（*）号的图形计算器型号内置了记忆功能。 计算器模拟软件","categories":[{"name":"AP","slug":"AP","permalink":"https://jerrynju.github.io/categories/AP/"}],"tags":[{"name":"AP","slug":"AP","permalink":"https://jerrynju.github.io/tags/AP/"},{"name":"Calculus","slug":"Calculus","permalink":"https://jerrynju.github.io/tags/Calculus/"},{"name":"教学笔记","slug":"教学笔记","permalink":"https://jerrynju.github.io/tags/教学笔记/"}]},{"title":"Markdown渲染引擎测试","slug":"test-md","date":"2018-01-14T10:43:49.000Z","updated":"2018-02-04T03:05:16.218Z","comments":true,"path":"2018/01/14/test-md/","link":"","permalink":"https://jerrynju.github.io/2018/01/14/test-md/","excerpt":"","text":"","categories":[],"tags":[{"name":"Mardown","slug":"Mardown","permalink":"https://jerrynju.github.io/tags/Mardown/"},{"name":"Writing","slug":"Writing","permalink":"https://jerrynju.github.io/tags/Writing/"},{"name":"Coding","slug":"Coding","permalink":"https://jerrynju.github.io/tags/Coding/"}]}]}